#include "binary_trees.h"

/**
 * max - Get the maximum of two integers
 * @a: First integer
 * @b: Second integer
 * Return: The maximum of a and b
 */
static int max(int a, int b)
{
    return (a > b ? a : b);
}

/**
 * height - Calculate the height of a binary tree
 * @tree: A pointer to the root node of the tree
 * Return: The height of the tree, or -1 if tree is NULL
 */
static int height(const binary_tree_t *tree)
{
    int left_height, right_height;

    if (tree == NULL)
        return (-1);

    left_height = height(tree->left);
    right_height = height(tree->right);

    return (1 + max(left_height, right_height));
}

/**
 * binary_tree_is_avl - Check if a binary tree is a valid AVL tree
 * @tree: A pointer to the root node of the tree to check
 * Return: 1 if the tree is a valid AVL tree, 0 otherwise
 */
int binary_tree_is_avl(const binary_tree_t *tree)
{
    int left_height, right_height, diff;

    if (tree == NULL)
        return (0);

    left_height = height(tree->left);
    right_height = height(tree->right);
    diff = abs(left_height - right_height);

    if (diff > 1)
        return (0);

    return (binary_tree_is_avl(tree->left) && binary_tree_is_avl(tree->right));
}
